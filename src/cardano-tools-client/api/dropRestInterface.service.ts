/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Drop } from '../model/drop';
import { DropTransient } from '../model/dropTransient';
import { MintingStatus } from '../model/mintingStatus';
import { PublicDropInfo } from '../model/publicDropInfo';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DropRestInterfaceService {

    protected basePath = 'http://localhost:8081';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param key 
     * @param policyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createDrop(body: DropTransient, key: string, policyId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createDrop(body: DropTransient, key: string, policyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createDrop(body: DropTransient, key: string, policyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createDrop(body: DropTransient, key: string, policyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createDrop.');
        }

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling createDrop.');
        }

        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling createDrop.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/drop/${encodeURIComponent(String(key))}/${encodeURIComponent(String(policyId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param prettyUrl 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDrop(prettyUrl: string, observe?: 'body', reportProgress?: boolean): Observable<PublicDropInfo>;
    public getDrop(prettyUrl: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PublicDropInfo>>;
    public getDrop(prettyUrl: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PublicDropInfo>>;
    public getDrop(prettyUrl: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (prettyUrl === null || prettyUrl === undefined) {
            throw new Error('Required parameter prettyUrl was null or undefined when calling getDrop.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PublicDropInfo>('get',`${this.basePath}/api/drop/${encodeURIComponent(String(prettyUrl))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param key 
     * @param policyId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDrops(key: string, policyId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Drop>>;
    public getDrops(key: string, policyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Drop>>>;
    public getDrops(key: string, policyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Drop>>>;
    public getDrops(key: string, policyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getDrops.');
        }

        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling getDrops.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Drop>>('get',`${this.basePath}/api/drop/${encodeURIComponent(String(key))}/${encodeURIComponent(String(policyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFundedAddresses(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getFundedAddresses(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getFundedAddresses(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getFundedAddresses(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/api/drop/fundedAddresses`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param paymentTxId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMintingStatus(paymentTxId: string, observe?: 'body', reportProgress?: boolean): Observable<MintingStatus>;
    public getMintingStatus(paymentTxId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MintingStatus>>;
    public getMintingStatus(paymentTxId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MintingStatus>>;
    public getMintingStatus(paymentTxId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (paymentTxId === null || paymentTxId === undefined) {
            throw new Error('Required parameter paymentTxId was null or undefined when calling getMintingStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<MintingStatus>('get',`${this.basePath}/api/drop/status/${encodeURIComponent(String(paymentTxId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initMintingStatus(body: MintingStatus, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public initMintingStatus(body: MintingStatus, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public initMintingStatus(body: MintingStatus, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public initMintingStatus(body: MintingStatus, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling initMintingStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/drop/status`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param key 
     * @param policyId 
     * @param dropId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDrop(body: DropTransient, key: string, policyId: string, dropId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateDrop(body: DropTransient, key: string, policyId: string, dropId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateDrop(body: DropTransient, key: string, policyId: string, dropId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateDrop(body: DropTransient, key: string, policyId: string, dropId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateDrop.');
        }

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling updateDrop.');
        }

        if (policyId === null || policyId === undefined) {
            throw new Error('Required parameter policyId was null or undefined when calling updateDrop.');
        }

        if (dropId === null || dropId === undefined) {
            throw new Error('Required parameter dropId was null or undefined when calling updateDrop.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/api/drop/${encodeURIComponent(String(key))}/${encodeURIComponent(String(policyId))}/${encodeURIComponent(String(dropId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
